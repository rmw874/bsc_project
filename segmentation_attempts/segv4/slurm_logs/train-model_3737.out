Activating conda environment: mgr
Using Python from /home/dxq257/miniforge3/envs/mgr/bin/python
Python 3.10.15
Starting training script
/home/dxq257/piratbog/segmentationV4/scripts/train.py:77: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = torch.cuda.amp.GradScaler()
Traceback (most recent call last):
  File "/home/dxq257/piratbog/segmentationV4/scripts/train.py", line 84, in <module>
    for img_tensor, mask_tensor in dataloader:
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1344, in _next_data
    return self._process_data(data)
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1370, in _process_data
    data.reraise()
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/_utils.py", line 706, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/_utils/worker.py", line 309, in _worker_loop
    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/dxq257/miniforge3/envs/mgr/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/dxq257/piratbog/segmentationV4/scripts/dataset.py", line 58, in __getitem__
    mask_tensor = mask_tensor.permute(0, 2, 3, 1)  # [batch, height, width, num_classes]
RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

